// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  phone     String @unique
  password  String
  firstName String
  lastName  String

  // orders       Order[]
  shoppingCart ShoppingCart?
  userAddress  UserAddress?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAddress {
  id         String   @id @default(uuid())
  address    String
  city       String
  postalCode String
  country    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum AdminType {
  SUPER
  DEFAULT
}

model Admin {
  id        String    @id @default(uuid())
  login     String    @unique
  email     String    @unique
  phone     String    @unique
  password  String
  firstName String
  lastName  String
  adminType AdminType @default(DEFAULT)
  lastLogin DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String
  price       Float
  quantity    Int
  slug        String @unique
  imageUrl    String

  // orders            OrderItem[]
  shoppingCartItems ShoppingCartItem[]
  productCategory   ProductCategory    @relation(fields: [productCategoryId], references: [id])

  productCategoryId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  discount   Discount?
  discountId String?
}

model ProductCategory {
  id          String    @id @default(uuid())
  slug        String    @unique
  name        String    @unique
  description String
  products    Product[]
}

model Discount {
  id              String  @id @default(uuid())
  product         Product @relation(fields: [productId], references: [id])
  productId       String  @unique
  active          Boolean @default(true)
  discountPercent Float
}

// model Order {
//   id         String      @id @default(uuid())
//   createdAt  DateTime    @default(now())
//   status     OrderStatus
//   totalPrice Float
//   userId     String
//   user       User        @relation(fields: [userId], references: [id])
//   items      OrderItem[]
// }

// model OrderItem {
//   id        String  @id @default(uuid())
//   quantity  Int
//   productId String
//   orderId   String
//   product   Product @relation(fields: [productId], references: [id])
//   order     Order   @relation(fields: [orderId], references: [id])
// }

// enum OrderStatus {
//   PENDING
//   PROCESSING
//   SHIPPED
//   DELIVERED
//   CANCELED
// }

model ShoppingCart {
  id                String             @id @default(uuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id])
  shoppingCartitems ShoppingCartItem[]
}

model ShoppingCartItem {
  id           String       @id @default(uuid())
  quantity     Int
  productId    String
  cartId       String
  product      Product      @relation(fields: [productId], references: [id])
  shoppingCart ShoppingCart @relation(fields: [cartId], references: [id])
}
